q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(wcomp)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 20, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.25)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
result.ref.validity
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.25)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,median_SD_threshold = 1,verbose = T)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,median_SD_threshold = 1,verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
result.ref.validity
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
#wcomp.generate_example_dataset = function(n_X = 30,n_Y = 30,m1 = 30,signal_strength_as_change_in_microbial_load = 0.1){
library(phyloseq)
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip", package="phyloseq")
kostic = microbio_me_qiime(filepath)
kostic <- subset_samples(kostic, DIAGNOSIS != "None")
kostic <- prune_samples(sample_sums(kostic) > 500, kostic)
kostic_counts = as.matrix(t(otu_table(kostic)))
kostic_sample_data = sample_data(kostic)
kostic_sample_names_healthy = as.character(kostic_sample_data$X.SampleID)[
which(kostic_sample_data$BSP_DIAGNOSIS == 'None')
]
kostic_counts_data_healthy = kostic_counts[which(rownames(kostic_counts) %in% kostic_sample_names_healthy),]
#keep taxa that appear in  at least 2 subjects:
kostic_counts_data_healthy= kostic_counts_data_healthy[ , apply(kostic_counts_data_healthy>0,2,sum) >= 2 ]
kostic_N_reads = median(apply(kostic_counts_data_healthy,1,sum))
#Generate taxon means:
p= ncol(kostic_counts_data_healthy)
select_diff_abundant = sample(1:p,size = m1,replace = F)
n_samples_to_sample_from = nrow(kostic_counts_data_healthy)
N_reads = kostic_N_reads
X = matrix(NA,nrow = n_X,ncol = p)
Y = matrix(NA,nrow = n_Y,ncol = p)
for(i in 1:n_X){
sample_abundances_X = kostic_counts_data_healthy[sample(1:n_samples_to_sample_from,1),]
X[i,] = rmultinom(1,size = rpois(1,N_reads),prob = sample_abundances_X)
}
for(i in 1:n_Y){
sample_abundances_Y = kostic_counts_data_healthy[sample(1:n_samples_to_sample_from,1),,drop = T]
sample_abundances_Y[1,select_diff_abundant] = sample_abundances_Y[1,select_diff_abundant] + rpois(m1,(sum(sample_abundances_Y) * signal_strength_as_change_in_microbial_load/m1))
Y[i,] = rmultinom(1,size = rpois(1,N_reads),prob = sample_abundances_Y)
}
counts = rbind(X,Y)
group_labels = c(rep(0,n_X),rep(1,n_Y))
ret = list(counts = counts,
group_labels = group_labels,
select_diff_abundant = select_diff_abundant)
return(ret)
}
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,median_SD_threshold = 0.8, verbose = T)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.1)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,median_SD_threshold = 0.8, verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
result.ref.validity
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
result.ref.validity
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.03)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,median_SD_threshold = 0.8, verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100, n_Y = 100,signal_strength_as_change_in_microbial_load = 0.01)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,median_SD_threshold = 0.8, verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100,
n_Y = 100,signal_strength_as_change_in_microbial_load = 0.01)
10^4
library(wcomp)
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100,
n_Y = 100,signal_strength_as_change_in_microbial_load = 0.01)
image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.8,
verbose = T)
library(wcomp)
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 100,
n_Y = 100,signal_strength_as_change_in_microbial_load = 0.01)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 50,
n_Y = 50,signal_strength_as_change_in_microbial_load = 0.01)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.8,
verbose = T)
library(wcomp)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.8,
verbose = T)
result.selected.references
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
library(wcomp)
library(wcomp)
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
unlist(test.reference.set.validity)
any(unlist(test.reference.set.validity)<=T1E_reference_validation)
library(wcomp)
library(wcomp)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 50,
n_Y = 50,signal_strength_as_change_in_microbial_load = 0.01)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.8,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
library(wcomp)
result.ref.validity
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 50,
n_Y = 50,signal_strength_as_change_in_microbial_load = 0.1)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.8,
verbose = T)
library(wcomp)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 50,
n_Y = 50,signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.8,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 50, n_X = 50,
n_Y = 50,signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100, n_X = 50,
n_Y = 50,signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
length(result.selected.references$selected_references)
library(wcomp)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
library(wcomp)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.ref.validity = wcomp.check_reference_set_is_valid(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,test = 'TwoPartWilcoxon',verbose = T,q = q_DSFDR)
current_stats
head(current_stats)
statistic
(subzero::rcpp_TwoPartTest_Given_Permutations(ranked_X,Y_matrix)[[1]])
ranked_X
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,test = 'TwoPartWilcoxon',verbose = T,q = q_DSFDR)
(subzero::rcpp_TwoPartTest_Given_Permutations(ranked_X,Y_matrix)[[1]])
current_stats
temp = (subzero::rcpp_TwoPartTest_Given_Permutations(ranked_X,Y_matrix)
)
temp
length(temp)
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,test = 'TwoPartWilcoxon',verbose = T,q = q_DSFDR)
X_matrix[,1]
X_ranked_without_zeroes
(subzero::rcpp_TwoPartTest_Given_Permutations(X_ranked_without_zeroes,Y_matrix)[[1]])
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,test = 'TwoPartWilcoxon',verbose = T,q = q_DSFDR)
current_stats
current_stats[1]
hist(current_stats)
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,test = 'TwoPartWilcoxon',verbose = T,q = q_DSFDR)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
rejected_DSFDR
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) #,test = 'TwoPartWilcoxon'
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) #,test = 'TwoPartWilcoxon'
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR,test = 'TwoPartWilcoxon') #,test = 'TwoPartWilcoxon'
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
WCOMP.TEST.NAME.WILCOXON = 'Wilcoxon'
WCOMP.TEST.NAME.DIFFERENCE_IN_MEANS = 'Avg.Diff'
WCOMP.TEST.NAME.LOG_FOLD_DIFFERENCE_IN_MEANS = 'Log.Avg.Diff'
WCOMP.TEST.NAME.TWO_PART_WILCOXON = 'TwoPartWilcoxon'
WCOMP.TEST.NAME.WILCOXON_SIGNED_RANK_TEST = 'SignedWilcoxon'
WCOMP.TEST.NAME.KRUSKAL_WALLIS = 'KW'
#define test properties:
#Tests that require Y to be 0 or 1 strictly:
TEST.DEF.Y.IS.0.OR.1 = c(WCOMP.TEST.NAME.WILCOXON,
WCOMP.TEST.NAME.DIFFERENCE_IN_MEANS,
WCOMP.TEST.NAME.LOG_FOLD_DIFFERENCE_IN_MEANS,
WCOMP.TEST.NAME.TWO_PART_WILCOXON,
WCOMP.TEST.NAME.WILCOXON_SIGNED_RANK_TEST)
WCOMP.POSSIBLE.TEST.NAMES = c(WCOMP.TEST.NAME.WILCOXON,
WCOMP.TEST.NAME.DIFFERENCE_IN_MEANS,
WCOMP.TEST.NAME.LOG_FOLD_DIFFERENCE_IN_MEANS,
WCOMP.TEST.NAME.TWO_PART_WILCOXON,
WCOMP.TEST.NAME.WILCOXON_SIGNED_RANK_TEST)
WCOMP.POSSIBLE.TEST.NAMES
WCOMP.POSSIBLE.TEST.NAMES = c(WCOMP.TEST.NAME.WILCOXON,
WCOMP.TEST.NAME.DIFFERENCE_IN_MEANS,
WCOMP.TEST.NAME.LOG_FOLD_DIFFERENCE_IN_MEANS,
WCOMP.TEST.NAME.TWO_PART_WILCOXON,
WCOMP.TEST.NAME.WILCOXON_SIGNED_RANK_TEST,
WCOMP.TEST.NAME.KRUSKAL_WALLIS)
WCOMP.POSSIBLE.TEST.NAMES
