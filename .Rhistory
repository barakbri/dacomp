q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) #,test = 'TwoPartWilcoxon'
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
library(phyloseq)
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip", package="phyloseq")
kostic = suppressWarnings(microbio_me_qiime(filepath))
library(wcomp)
kostic = suppressMessages(suppressWarnings(microbio_me_qiime(filepath)))
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip", package="phyloseq")
library(wcomp)
library(phyloseq)
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip", package="phyloseq")
kostic = invisible(suppressWarnings(microbio_me_qiime(filepath)))
tempfile()
tempfile()
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
as.numeric(as.factor(c(rep(4,50),rep(3,50))))
as.numeric(as.factor(c(rep(4,50),rep(3,50))))-1
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) #,test = 'TwoPartWilcoxon'
y
as.numeric( as.factor(y) ) - 1
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',FDR))
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2)))
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
library(wcomp)
is.integer(NA)
is.integer(NAN)
is.integer(NaN)
is.integer(null)
is.integer(NULL)
is.matrix(NA)
is.matrix(NaN)
length(NULL)
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6, #APPLICATION SPECIFIC
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6, #APPLICATION SPECIFIC
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6, #APPLICATION SPECIFIC
verbose = T)
library(wcomp)
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6, #APPLICATION SPECIFIC
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 1.3, #APPLICATION SPECIFIC
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR,return_results_also_on_reference_validation_fail = T) # can also use for example , test = 'TwoPartWilcoxon', show example
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR,return_results_also_on_reference_validation_fail = F) # can also use for example , test = 'TwoPartWilcoxon', show example
result.test$test.reference.set.validity
result.test$warning_msg
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR,return_results_also_on_reference_validation_fail = T) # can also use for example , test = 'TwoPartWilcoxon', show example
result.test$p.values.test
hist(result.test$p.values.test)
library(wcomp)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 1.3, #APPLICATION SPECIFIC
verbose = T)
library(wcomp)
set.seed(1)
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1)
#image(t(log10(data$counts+1)))
#select references: (may take a minute)
result.selected.references = wcomp.select_references(X = data$counts,
median_SD_threshold = 0.6, #APPLICATION SPECIFIC
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
result.ref.validity = wcomp.check_reference_set_is_valid.k_groups(X_ref = data$counts[,result.selected.references$selected_references],Y = data$group_labels,nr.perm = 10000,verbose = T)
library(wcomp)
result.test = wcomp.test(X = data$counts,
y = data$group_labels,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR) # can also use for example , test = 'TwoPartWilcoxon', show example
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
rejected_DSFDR
TP_DSFDR = sum((rejected_DSFDR %in% data$select_diff_abundant))
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP_DSFDR = sum((rejected_DSFDR %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
FDR_DSFDR = ifelse(length(rejected_DSFDR)>0,
sum(!(rejected_DSFDR %in% data$select_diff_abundant))/length(rejected_DSFDR),
0)
TP_DSFDR
FDR_DSFDR
install.packages('testthat')
install.packages('usethis')
library(usethis)
use_test("Usecase_Simple_Two_Groups")
getwd()
original_wd = getwd()
setwd('E:/MCB3/CompositionalAnalysis_CodeBase/MCB_Simulation/')
source(paste0('REFSIM_GenerateSettings_Index.R'))
REFSIM_generate_setting_wrapper
data = REFSIM_generate_setting_wrapper(REFSIM_SETTINGS_LIST[[11]])
data$X
dim(data$X)
library(wcomp)
set.seed(1)
original_wd = getwd()
setwd('E:/MCB3/CompositionalAnalysis_CodeBase/MCB_Simulation/')
source(paste0('REFSIM_GenerateSettings_Index.R'))
data = REFSIM_generate_setting_wrapper(REFSIM_SETTINGS_LIST[[11]])
result.selected.references = wcomp.select_references(X = data$X,
median_SD_threshold = 1.3,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$X,
y = data$Y,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR)
result.test = wcomp.test(X = data$X,
y = data$Y,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR,nr_perm = 10000)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP_DSFDR = sum((rejected_DSFDR %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
FDR_DSFDR = ifelse(length(rejected_DSFDR)>0,
sum(!(rejected_DSFDR %in% data$select_diff_abundant))/length(rejected_DSFDR),
0)
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
library(wcomp)
set.seed(1)
original_wd = getwd()
setwd('E:/MCB3/CompositionalAnalysis_CodeBase/MCB_Simulation/')
source(paste0('REFSIM_GenerateSettings_Index.R'))
data = REFSIM_generate_setting_wrapper(REFSIM_SETTINGS_LIST[[10]])
result.selected.references = wcomp.select_references(X = data$X,
median_SD_threshold = 1.3,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
q_BH = q_DSFDR = 0.1
result.test = wcomp.test(X = data$X,
y = data$Y,
ind_reference_taxa = result.selected.references$selected_references,verbose = T,q = q_DSFDR,nr_perm = 10000)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP_DSFDR = sum((rejected_DSFDR %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
FDR_DSFDR = ifelse(length(rejected_DSFDR)>0,
sum(!(rejected_DSFDR %in% data$select_diff_abundant))/length(rejected_DSFDR),
0)
cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
SCENARIO_run_backwards_compatability = function(scenario_ID,nr.reps = 10,q_BH = 0.1 , q_DSFDR = 0.1,verbose = T){
mean_TP_BH = 0
mean_FDR_BH = 0
mean_TP_DSFDR = 0
mean_FDR_DSFDR = 0
for(b in 1:nr.reps){
if(verbose){
cat(paste0('Running scenario ID ',scenario_ID,', rep: ',b,' / ',nr.reps,'\n\r'))
}
data = REFSIM_generate_setting_wrapper(REFSIM_SETTINGS_LIST[[scenario_ID]])
result.selected.references = wcomp.select_references(X = data$X,
median_SD_threshold = 1.3,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
result.test = wcomp.test(X = data$X,
y = data$Y,
ind_reference_taxa = result.selected.references$selected_references,
verbose = T,q = q_DSFDR,nr_perm = 10000,
return_results_also_on_reference_validation_fail = T)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP_DSFDR = sum((rejected_DSFDR %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
FDR_DSFDR = ifelse(length(rejected_DSFDR)>0,
sum(!(rejected_DSFDR %in% data$select_diff_abundant))/length(rejected_DSFDR),
0)
mean_TP_BH = mean_TP_BH + TP
mean_FDR_BH = mean_FDR_BH + FDR
mean_TP_DSFDR = mean_TP_DSFDR + TP_DSFDR
mean_FDR_DSFDR = mean_FDR_DSFDR + FDR_DSFDR
#cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
}
return(list(mean_TP_BH = mean_TP_BH/nr.reps,
mean_FDR_BH = mean_FDR_BH/nr.reps,
mean_TP_DSFDR = mean_TP_DSFDR/nr.reps,
mean_FDR_DSFDR = mean_FDR_DSFDR/nr.reps))
}
scenario_results = list()
scenario_results[[1]] = SCENARIO_run_backwards_compatability(1)
library(doRNG)
??doRNG::`%dorng%`()
??doRNG
library(doParallel)
detectCores()
library(doRNG)
library(doParallel)
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
start_scenario = 1
end_scenario = 7
nr.reps = 1
scenario_results = foreach(s=start_scenario:end_scenario, .options.RNG=1234) %dorng% { SCENARIO_run_backwards_compatability(s,nr.reps = nr.reps,q_BH = 0.1,q_DSFDR = 0.1) }
stopCluster(cl)
SCENARIO_run_backwards_compatability = function(scenario_ID,nr.reps = 10,q_BH = 0.1 , q_DSFDR = 0.1,verbose = T){
library(wcomp)
mean_TP_BH = 0
mean_FDR_BH = 0
mean_TP_DSFDR = 0
mean_FDR_DSFDR = 0
for(b in 1:nr.reps){
if(verbose){
cat(paste0('Running scenario ID ',scenario_ID,', rep: ',b,' / ',nr.reps,'\n\r'))
}
data = REFSIM_generate_setting_wrapper(REFSIM_SETTINGS_LIST[[scenario_ID]])
result.selected.references = wcomp.select_references(X = data$X,
median_SD_threshold = 1.3,
verbose = T)
length(result.selected.references$selected_references)
#plot the reference selection scores (can be used to better set the threshold...)
wcomp.plot_reference_scores(result.selected.references)
DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET = sum(result.selected.references$selected_references %in% data$select_diff_abundant)
cat(paste0('DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET: ',DIFF_ABUNDANT_TAXA_IN_REFERENCE_SET))
result.test = wcomp.test(X = data$X,
y = data$Y,
ind_reference_taxa = result.selected.references$selected_references,
verbose = T,q = q_DSFDR,nr_perm = 10000,
return_results_also_on_reference_validation_fail = T)
rejected_BH = which(p.adjust(result.test$p.values.test,method = 'BH')<=q_BH)
rejected_DSFDR = result.test$rejected
TP = sum((rejected_BH %in% data$select_diff_abundant))
TP_DSFDR = sum((rejected_DSFDR %in% data$select_diff_abundant))
FDR = ifelse(length(rejected_BH)>0,
sum(!(rejected_BH %in% data$select_diff_abundant))/length(rejected_BH),
0)
FDR_DSFDR = ifelse(length(rejected_DSFDR)>0,
sum(!(rejected_DSFDR %in% data$select_diff_abundant))/length(rejected_DSFDR),
0)
mean_TP_BH = mean_TP_BH + TP
mean_FDR_BH = mean_FDR_BH + FDR
mean_TP_DSFDR = mean_TP_DSFDR + TP_DSFDR
mean_FDR_DSFDR = mean_FDR_DSFDR + FDR_DSFDR
#cat(paste0('True positives: ',TP,', FDR: ',round(FDR,2),'\n\r'))
}
return(list(mean_TP_BH = mean_TP_BH/nr.reps,
mean_FDR_BH = mean_FDR_BH/nr.reps,
mean_TP_DSFDR = mean_TP_DSFDR/nr.reps,
mean_FDR_DSFDR = mean_FDR_DSFDR/nr.reps))
}
stopCluster(cl)
library(doRNG)
library(doParallel)
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
start_scenario = 1
end_scenario = 7
nr.reps = 1
scenario_results = foreach(s=start_scenario:end_scenario, .options.RNG=1234) %dorng% { SCENARIO_run_backwards_compatability(s,nr.reps = nr.reps,q_BH = 0.1,q_DSFDR = 0.1) }
stopCluster(cl)
length(scenario_results)
result_table = scenario_results[[1]]
result_table
result_table = unlist(scenario_results[[1]])
result_table
result_table = unlist(scenario_results[[1]])
for(i in 2:length(scenario_results)){
result_table = rbind(result_table,unlist(scenario_results[[i]]))
}
result_table
library(testthat)
use_test('Example_Data')
use_test('Reference_Selection')
use_test('Reference_Validation')
use_test('Plotting')
use_test('Main_Testing')
data = wcomp.generate_example_dataset(m1 = 100,
n_X = 50,
n_Y = 50,
signal_strength_as_change_in_microbial_load = 0.1);
class(data)
typeof(data)
expect_is(data,class = class(list()))
expect_is(data,class = class('ddd'))
names(data)
expect_equal(names(data),c("counts","group_labels","select_diff_abundant"))
expect_equal(names(data),c("counts","group_labels","select_diff_abundant"))
expect_equal(names(data),c("counts","group_labels","select_diff_abundant",'a'))
dim(data)
dim(data$counts)
sink(file = 'E:/temp/wcomp_test_results.txt')
devtools::test()
setwd('E:/wcomp/')
sink(file = 'E:/temp/wcomp_test_results.txt')
devtools::test()
exists(DO_SIMPLE_USE_CASE)
exists('DO_SIMPLE_USE_CASE')
use_test('Regresion_Power_FDR')
source('C:/Users/Barak/Desktop/testing_Main_wcomp.R', echo=TRUE)
source('C:/Users/Barak/Desktop/testing_Main_wcomp.R', echo=TRUE)
