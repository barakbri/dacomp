pval_vec[ind]  = pval
print(pval)
}
which(pval_vec<=0.1)
# 2  16  22  23  24  27  31  34  40  46  60  74  78  81  88  96  98 113 129 133 136 145 147 157 163
length(which(pval_vec<=0.1))
pval_vec[which(pval_vec<=0.1)]
hist(pval_vec)
n_vec = apply(X_2,1,sum)
set.seed(1)
X_2_r = X_2
for(i in 1:nrow(X_2_r)){
X_2_r[i,] = rrarefy(X_2_r[i,],min(n_vec))
}
apply(X_2_r,1,sum)
B = 50 #2000
stat = NA
null_stat = rep(NA,B)
ind = 1
pval_vec = rep(NA,ncol(X_2))
ratio_vec  = (apply(X_2_r[Y==0,],2,mean)/apply(X_2_r[Y==1,],2,mean))
W = median(ratio_vec)
tau_param = 10^(seq(-5,-0.5,0.5))
for(ind in 1:ncol(X_2)){
#ind = 2
print(paste0('taxa: ',ind  ))
temp = deconv_stat_modified(Counts = X_2_r[,ind],Labels = Y,TotalCounts = n_vec,tau_param = tau_param)
#plot(temp$g_x)
#points(temp$g_y,col = 'red')
#stat = abs(mean(tau_param*temp$g_x) - W*mean(tau_param*temp$g_y))#temp$stat.ks # abs(mean(tau_param*temp$g_x) - W*mean(tau_param*temp$g_y)) #
# F_X = approxfun(tau_param,temp$G_X)
# F_Y = approxfun(W*tau_param,temp$G_Y)
#curve(F_X, from = 10^(-5),to = 10^(-0.5),n = 20, col = "green")
stat = W*mean(tau_param*temp$g_y) - mean(tau_param*temp$g_x) #abs(mean(tau_param*temp$g_x) - W*mean(tau_param*temp$g_y))
# stat = max(abs(F_X(tau_param[-1]) - F_Y(tau_param[-1])))
for(b in 1:B){
temp2 = deconv_stat_modified(Counts = X_2_r[,ind],Labels = sample(Y),TotalCounts = n_vec,tau_param = tau_param)
#
# plot(temp2$g_x)
# points(temp2$g_y,col = 'red')
# F_X = approxfun(tau_param,temp2$G_X)
# F_Y = approxfun(W*tau_param,temp2$G_Y)
#curve(F_X, from = 10^(-5),to = 10^(-0.5),n = 20, col = "green")
#null_stat[b] =  #max(abs(F_X(tau_param[-1]) - F_Y(tau_param[-1])))
#null_stat[b] = abs(mean(tau_param*temp2$g_x) - W*mean(tau_param*temp2$g_y)) #temp2$stat.ks #abs(mean(tau_param*temp2$g_x) - W*mean(tau_param*temp2$g_y)) ##
null_stat[b]  =  W*mean(tau_param*temp2$g_y) - mean(tau_param*temp2$g_x)
}
#hist(null_stat)
#ecdf(null_stat)(stat)
pval = mean(c(null_stat,stat) >= stat)
pval_vec[ind]  = pval
print(pval)
}
which(pval_vec<=0.1)
# 2  16  22  23  24  27  31  34  40  46  60  74  78  81  88  96  98 113 129 133 136 145 147 157 163
length(which(pval_vec<=0.1))
pval_vec[which(pval_vec<=0.1)]
hist(pval_vec)
library(subzero)
library(subzero)
library(subzero)
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
reference_values
total_reads_per_subject
min_value
to_keep
nom_keep
dnom_keep
nom_keep_original
nom_keep_original
dnom_keep_original
min_value
rarefaction_matrix
temp = multipleX.ChiSq.Averaging.test(rarefaction_matrix,Y_matrix,min_value,statistic = test)
temp
length(temp)
debugSource('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
true_positive
false_positive
res$rejected
length(rejected)
true_positive
false_positive
bad_select
reference_significant
debugSource('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
aggregated_results
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
aggregated_results
library(subzero)
library(subzero)
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
library(subzero)
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
aggregated_results
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
aggregated_results
source('E:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V9.R', echo=TRUE)
aggregated_results
source('E:/MCB2/MCB2/MCB_Simulation/Gut_Data_Analyze_V3.R', echo=TRUE)
save.image("E:/MCB2/Results/Gut_qpcr_results.RData")
library(subzero)
source('C:/MCB2/MCB2/MCB_Simulation/HMP_RDE_Meta_V11.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_NoCompositionality_Scenario2.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V10.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_SingleScenario_V10.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
BATCH_VEC = (76:80) #c(1,18,19,20,30,41,44,47,50,53,56)#c(30:40,66:75,76)
MAINDIR = 'C:/MCB2/'
RESULTS_DIR = paste0(MAINDIR,"/Results/")
REFSIM_aggregated_results_file = function(RESULTS_DIR,SCENARIO_ID){
return(paste0(RESULTS_DIR,'/REFSIM_aggregated_results_',SCENARIO_ID,'.RData'))
}
ROW_ORDER = c(2:3)#c(1:4)
filename = REFSIM_aggregated_results_file(RESULTS_DIR,BATCH_VEC[1])
load(file = filename)
results_all_settings = aggregated_results#[ROW_ORDER,]
for(s in (2):length(BATCH_VEC)){
filename = REFSIM_aggregated_results_file(RESULTS_DIR,BATCH_VEC[s])
load(file = filename)
results_all_settings = rbind(results_all_settings, aggregated_results)#[ROW_ORDER,])
}
settings_names = rep(NA,length(REFSIM_SETTINGS_LIST))
for(i in 1:length(settings_names))
settings_names[i] = REFSIM_SETTINGS_LIST[[i]]$label
results_all_settings$setting_name = settings_names[results_all_settings$setting_id]
write.csv(results_all_settings,file = paste0(RESULTS_DIR,'REFSIM_Combined_Results.csv'))
0.5*c(rep(200,50),rep(25,150),rep(5,800))
sum(0.7*0.5*c(rep(200,50),rep(25,150),rep(5,800)))
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
BATCH_VEC = (76:80) #c(1,18,19,20,30,41,44,47,50,53,56)#c(30:40,66:75,76)
MAINDIR = 'C:/MCB2/'
RESULTS_DIR = paste0(MAINDIR,"/Results/")
REFSIM_aggregated_results_file = function(RESULTS_DIR,SCENARIO_ID){
return(paste0(RESULTS_DIR,'/REFSIM_aggregated_results_',SCENARIO_ID,'.RData'))
}
ROW_ORDER = c(2:3)#c(1:4)
filename = REFSIM_aggregated_results_file(RESULTS_DIR,BATCH_VEC[1])
load(file = filename)
results_all_settings = aggregated_results#[ROW_ORDER,]
for(s in (2):length(BATCH_VEC)){
filename = REFSIM_aggregated_results_file(RESULTS_DIR,BATCH_VEC[s])
load(file = filename)
results_all_settings = rbind(results_all_settings, aggregated_results)#[ROW_ORDER,])
}
settings_names = rep(NA,length(REFSIM_SETTINGS_LIST))
for(i in 1:length(settings_names))
settings_names[i] = REFSIM_SETTINGS_LIST[[i]]$label
results_all_settings$setting_name = settings_names[results_all_settings$setting_id]
write.csv(results_all_settings,file = paste0(RESULTS_DIR,'REFSIM_Combined_Results.csv'))
sum(0.7*1*c(rep(200,50),rep(50,150),rep(10,800)))
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
BATCH_VEC = (76:80) #c(1,18,19,20,30,41,44,47,50,53,56)#c(30:40,66:75,76)
MAINDIR = 'C:/MCB2/'
RESULTS_DIR = paste0(MAINDIR,"/Results/")
REFSIM_aggregated_results_file = function(RESULTS_DIR,SCENARIO_ID){
return(paste0(RESULTS_DIR,'/REFSIM_aggregated_results_',SCENARIO_ID,'.RData'))
}
ROW_ORDER = c(2:3)#c(1:4)
filename = REFSIM_aggregated_results_file(RESULTS_DIR,BATCH_VEC[1])
load(file = filename)
results_all_settings = aggregated_results#[ROW_ORDER,]
for(s in (2):length(BATCH_VEC)){
filename = REFSIM_aggregated_results_file(RESULTS_DIR,BATCH_VEC[s])
load(file = filename)
results_all_settings = rbind(results_all_settings, aggregated_results)#[ROW_ORDER,])
}
settings_names = rep(NA,length(REFSIM_SETTINGS_LIST))
for(i in 1:length(settings_names))
settings_names[i] = REFSIM_SETTINGS_LIST[[i]]$label
results_all_settings$setting_name = settings_names[results_all_settings$setting_id]
write.csv(results_all_settings,file = paste0(RESULTS_DIR,'REFSIM_Combined_Results.csv'))
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
source('C:/MCB2/MCB2/MCB_Simulation/REFSIM_MultipleScenario_batch.R', echo=TRUE)
library(biomformat)
file_path <- "E:/MCB2/MCB2/MCB_Simulation/gut_otu_table.RData"
load(file_path)
Q_LEVEL = 0.1
#dim(otu_table)
Average_Cell_Count = c(5314887324,
61042558217,
8409441603,
32494562535,
18764726648,
12110411381,
14660465393,
94291923126,
11438369157,
7208134178,
17961581253,
112399396469,
48073771982,
48871825000,
57857074420,
16078707428,
49526146305,
15501173550,
25077773966,
83992769634,
17572221569,
112523183751,
81790788530,
37664569474,
60352099591,
98691161158,
68314356782,
12194333170,
57346163417,
99183906832,
217221266674,
151329659639,
90299128192,
95809600876,
132035763643,
39495621712,
119271846132,
138185802083,
121428187249,
145939517130,
224754815252,
72756226469,
35927546063,
107628776723,
130776743130,
41841212649,
22764340926,
172987119956,
46425487958,
153062883269,
95590999034,
208495566551,
53070915155,
18359008555,
70503715565,
58500810719,
89307497088,
147599455753,
19187237081,
217276666820,
253525709584,
25395316913,
22507873775,
142169041331,
116275992152,
142346591541,
161477761409,
5853245978,
47942791702,
28769973004,
168930811359,
126572467016,
117499264965,
116251948461,
177107799526,
74197893718,
48330742911,
203676977127,
187211301217,
174670957469,
75065628771,
54160688666,
165005851861,
215345198361,
150051113739,
191391240184,
20159773225,
38956568917,
123582072411,
98056602368,
184826494881,
54837809766,
70590688175,
132689255189,
98343121358)
Y = rep(0,95)
Y[1:29] = 1
boxplot(Average_Cell_Count[Y==1],Average_Cell_Count[Y==0],names = c('Sick','Healthy'),main='Boxplot for qPCR counts in Healthy/Sick')
mean(Average_Cell_Count[Y==0])/(mean(Average_Cell_Count[Y==1]))
#2.508608
median(Average_Cell_Count[Y==0])/(median(Average_Cell_Count[Y==1]))
#3.086826
otu_table = t(otu_table)
reordering_permutation = order(rownames(otu_table))
otu_table = otu_table[reordering_permutation,]
rownames(otu_table) #it is now ordered
dim(otu_table)
X = otu_table
median(sort(as.numeric(apply(X,1,sum))))
#[1] 20437
mean(sort(as.numeric(apply(X,1,sum))))
#[1] 22886
prevalence_matrix = 1*(X>0)
prev_taxa = as.numeric(apply(prevalence_matrix,2,mean))
hist(prev_taxa)
X_as_percentage = X
for(i in 1:nrow(X_as_percentage)){
X_as_percentage[i,] = (X_as_percentage[i,])/sum(X_as_percentage[i,])
}
mean_percent_taxa  = as.numeric(apply(X_as_percentage,2,mean))
#correct by volume counts
library(phyloseq)
rarefy_even_sampling_depth <- function(cnv_corrected_abundance_table, cell_counts_table)
{
try(if(all(row.names(cnv_corrected_abundance_table) == row.names(cell_counts_table))==FALSE) stop("Cnv_corrected_abundance_table and cell_counts_table do not have the same sample-names, Please check!"))
cnv_corrected_abundance_table = ceiling(cnv_corrected_abundance_table) # data values are rounded up in order to make use of integer values during the calculations
cell_counts_table = t(cell_counts_table[order(row.names(cnv_corrected_abundance_table)),]) # make sure the order of the samples is the same in both files
sample_sizes = rowSums(cnv_corrected_abundance_table) # sample size of each sample (total nr of reads)
sampling_depths = sample_sizes / cell_counts_table # sampling depth of each sample (total nr of reads divided by the cell count)
minimum_sampling_depth = min(sampling_depths) # minimum of all sampling depths
rarefy_to = cell_counts_table * minimum_sampling_depth # nr of reads to rarefy in each sample in order to get to an even sampling depth over all samples
cnv_corrected_abundance_table_phyloseq = otu_table(cnv_corrected_abundance_table, taxa_are_rows = FALSE) # convert to phyloseq otutable
rarefied_matrix=matrix(nrow = nrow(cnv_corrected_abundance_table_phyloseq), ncol = ncol(cnv_corrected_abundance_table_phyloseq), dimnames = list(rownames(cnv_corrected_abundance_table_phyloseq), colnames(cnv_corrected_abundance_table_phyloseq)))
for (i in 1:nrow(cnv_corrected_abundance_table_phyloseq))
{
x <- rarefy_even_depth(cnv_corrected_abundance_table_phyloseq[i,], sample.size = rarefy_to[i], rngseed = 711, replace = FALSE, trimOTUs = F, verbose = FALSE)
rarefied_matrix[i,] = x
}
normalised_rarefied_matrix = rarefied_matrix/rowSums(rarefied_matrix)
QMP = normalised_rarefied_matrix*cell_counts_table[1,]
return(QMP)
}
# Example
#a = matrix( c(4,4,2,1,8,5,2,0,3,5,3,1,10,8,3,0,0,6,4,3), nrow=5, ncol=4, byrow = TRUE, dimnames = list(c("Sample A", "Sample B", "Sample C", "Sample D", "Sample E"),c("taxa1", "taxa2", "taxa3", "taxa4"))) # my cnv_corrected_abundance_table
#b = matrix(c(10,20,34,21,12), nrow=5, ncol=1, byrow = TRUE, dimnames = list(c("Sample A", "Sample B", "Sample C", "Sample D", "Sample E"),c("#")))*100000 # my cell_counts_table
#rarefy_even_sampling_depth(a,b)
rownames(X)
Average_Cell_Count_matrix = matrix(Average_Cell_Count,ncol = 1)
rownames(Average_Cell_Count_matrix) = rownames(X)
X_corrected = rarefy_even_sampling_depth(X,Average_Cell_Count_matrix)
# X_corrected = X
# for(i in 1:nrow(X_corrected)){
#   X_corrected[i,] = X_corrected[i,] * Average_Cell_Count[i]
# }
# image(t(log10(X_corrected+1)))
#remove taxa in less than 4 people
OTHER = 2 #4
to_remove = which(as.numeric(apply(prevalence_matrix, 2, sum))<OTHER)
X = X[,-to_remove]
X_corrected = X_corrected[,-to_remove]
#Wilcoxon over the corrected
source('E:/MCB2/MCB2/MCB_Simulation/Wilcoxon_TaxaWise.R')
res_Wilcoxon_corrected = wilcoxon_taxa_wise(X_corrected,y = Y)
hist(res_Wilcoxon_corrected$p.values)
total_counts_in_taxa = as.numeric(apply(prevalence_matrix,2,sum))
disc_Wilcoxon_corrected = which(p.adjust(res_Wilcoxon_corrected$p.values,method = 'BH')<=Q_LEVEL)
length(disc_Wilcoxon_corrected) #211
library(ancom.R)
ANCOM_otu_dat = X
ANCOM_otu_dat = cbind(ANCOM_otu_dat,Y)
ANCOM_otu_dat = data.frame(ANCOM_otu_dat)
ANCOM_default_res = ancom.R::ANCOM(OTUdat = ANCOM_otu_dat,multcorr = 3,sig = Q_LEVEL)
ANCOM_multcorr_2_res = ancom.R::ANCOM(OTUdat = ANCOM_otu_dat,multcorr = 2,sig = Q_LEVEL)
ANCOM_multcorr_1_res = ancom.R::ANCOM(OTUdat = ANCOM_otu_dat,multcorr = 1,sig = Q_LEVEL)
intersect_with_ANCOM = function(ANCOM_res,subzero_rejections){
print(paste0('NUMBER OF ANCOM REJ:',length(ANCOM_res$detected)))
disc_ANCOM =which(colnames(ANCOM_otu_dat) %in% ANCOM_res$detected)
print(paste0('ANCOM in WILCOX corrected:',sum(disc_ANCOM %in% disc_Wilcoxon_corrected)))
print(paste0('SUBZERO in ANCOM corrected:',sum(subzero_rejections %in% disc_ANCOM)))
possibly_novel_disc = subzero_rejections[which(!(subzero_rejections %in% disc_ANCOM))]
print(paste0('Verified, Unique:',sum(possibly_novel_disc %in% disc_Wilcoxon_corrected),'/',length(possibly_novel_disc)))
ANCOM_TO_INVESTIGATE = disc_ANCOM[which(!(disc_ANCOM %in% subzero_rejections ))]
return(ANCOM_TO_INVESTIGATE)
}
#SAVE POINT
#load("E:/MCB2/Results/gut_V2_savepoint.RData")
#Checking subzero/thac0
library(subzero)
median_SD_thres_Vec = seq(1.0,1.4,0.05)
lambda_multiplier_Vec = c(1.0)
parameter_matrix = expand.grid(lambda_multiplier_Vec = lambda_multiplier_Vec ,
median_SD_thres_Vec = median_SD_thres_Vec)
source('E:/MCB2/MCB2/MCB_Simulation/SelectReferences_MedianSD_Threshold.R')
current_selected_ref_obj = NULL
last_computed_thres = NULL
ref_list = list()
res_Wilcoxon_list = list()
set.seed(1)
filepath_i = function(i){return(paste0('E:/MCB2/Results/Gut_temp_v2_file_',i,'.RData'))}
for(i in 1:nrow(parameter_matrix)){
current_thres = parameter_matrix$median_SD_thres_Vec[i]
current_multiplier = parameter_matrix$lambda_multiplier_Vec[i]
NEED_TO_SELECT = T
if(!is.null(last_computed_thres))
if(last_computed_thres == current_thres)
NEED_TO_SELECT = F
if(NEED_TO_SELECT){
print(paste0('Selecting references , thres = ',current_thres))
current_selected_ref_obj = select.references.Median.SD.Threshold(X,median_SD_threshold = current_thres,maximal_TA = 200,  verbose = F)
last_computed_thres = current_thres
}
ref_list[[i]] =   current_selected_ref_obj
print(paste0('Running subzero , mult = ',current_multiplier))
res_perm_Wilcoxon = subzero::subzero.dfdr.test(X = X,y = Y,
nr_reference_taxa = current_selected_ref_obj$selected_references,verbose = F,q = Q_LEVEL,
nr_rarefactions_multiple_X = 1,
nr_perm = 30000,lambda_multiplier = current_multiplier)
res_Wilcoxon_list[[i]] = res_perm_Wilcoxon
temp_obj = list(current_selected_ref_obj = current_selected_ref_obj,
res_perm_Wilcoxon = res_perm_Wilcoxon)
current_temp_filepath_i = filepath_i(i)
save(temp_obj,file = current_temp_filepath_i)
}
#load
ref_list = list()
res_Wilcoxon_list = list()
for(i in 1:nrow(parameter_matrix)){
print(paste0('Loading case ',i))
load(filepath_i(i))
ref_list[[i]] = temp_obj$current_selected_ref_obj
res_Wilcoxon_list[[i]] = temp_obj$res_perm_Wilcoxon
}
#Combine to get results
res_matrix = parameter_matrix
res_matrix = as.data.frame(res_matrix)
res_matrix$nr_rejected = rep(NA,nrow(res_matrix))
res_matrix$nr_rejected_dsfdr = rep(NA,nrow(res_matrix))
res_matrix$nr_rejected_ref = rep(NA,nrow(res_matrix))
res_matrix$nr_rejected_ref_dsfdr = rep(NA,nrow(res_matrix))
res_matrix$median_lambda = rep(NA,nrow(res_matrix))
res_matrix$mean_lambda = rep(NA,nrow(res_matrix))
res_matrix$ANCOM_3_intersect = rep(NA,nrow(res_matrix))
res_matrix$ANCOM_2_intersect = rep(NA,nrow(res_matrix))
res_matrix$ANCOM_1_intersect = rep(NA,nrow(res_matrix))
res_matrix$qPCR_intersect = rep(NA,nrow(res_matrix))
res_matrix$ref_size = rep(NA,nrow(res_matrix))
for(i in 1:nrow(res_matrix)){
res_matrix$nr_rejected[i] = length(which(p.adjust(res_Wilcoxon_list[[i]]$p.values.test,method = 'BH')<=Q_LEVEL))
res_matrix$nr_rejected_dsfdr[i] = length(res_Wilcoxon_list[[i]]$rejected)
res_matrix$nr_rejected_ref[i] = length(which(p.adjust(res_Wilcoxon_list[[i]]$rejected_ref,method = 'BH')<=Q_LEVEL))
res_matrix$nr_rejected_ref_dsfdr[i] = length(res_Wilcoxon_list[[i]]$rejected_ref)
res_matrix$median_lambda[i] = median(res_Wilcoxon_list[[i]]$min_value_array[-ref_list[[i]]$selected_references])
res_matrix$mean_lambda[i] = mean(res_Wilcoxon_list[[i]]$min_value_array[-ref_list[[i]]$selected_references])
subzero_rejections = which(p.adjust(res_Wilcoxon_list[[i]]$p.values.test,method = 'BH')<=Q_LEVEL)
disc_ANCOM_3 =which(colnames(ANCOM_otu_dat) %in% ANCOM_default_res$detected)
disc_ANCOM_2 =which(colnames(ANCOM_otu_dat) %in% ANCOM_multcorr_2_res$detected)
disc_ANCOM_1 =which(colnames(ANCOM_otu_dat) %in% ANCOM_multcorr_1_res$detected)
res_matrix$ANCOM_3_intersect[i] = sum(subzero_rejections %in% disc_ANCOM_3)
res_matrix$ANCOM_2_intersect[i] = sum(subzero_rejections %in% disc_ANCOM_2)
res_matrix$ANCOM_1_intersect[i] = sum(subzero_rejections %in% disc_ANCOM_1)
res_matrix$qPCR_intersect[i] = sum(subzero_rejections %in% disc_Wilcoxon_corrected)
res_matrix$ref_size[i] = length(ref_list[[i]]$selected_references)
}
write.csv(res_matrix,file = 'E:/MCB2/Results/Gut_Data_Results.csv',row.names =F)
#View(res_matrix)
length(ANCOM_default_res$detected)
length(ANCOM_multcorr_2_res$detected)
length(ANCOM_multcorr_1_res$detected)
length(disc_Wilcoxon_corrected)
X_CSS = t(metagenomeSeq::cumNormMat(t(X)))
res_Wilcoxon_Paulson = wilcoxon_taxa_wise(X_CSS,Y,normalize = F,normalize.P = 0.75)
hist(res_Wilcoxon_Paulson$p.values)
disc_Wilcoxon_Paulson = which(p.adjust(res_Wilcoxon_Paulson$p.values,method = 'BH')<=Q_LEVEL)
length(disc_Wilcoxon_Paulson)
sum(disc_Wilcoxon_Paulson %in% disc_Wilcoxon_corrected)
res_Wilcoxon_Percent = wilcoxon_taxa_wise(X_corrected,y = Y,normalize = T,normalize.P = 1)
hist(res_Wilcoxon_Percent$p.values)
disc_Wilcoxon_percent = which(p.adjust(res_Wilcoxon_Percent$p.values,method = 'BH')<=Q_LEVEL)
length(disc_Wilcoxon_percent) #211
disc_list = list(
disc_vec_ANCOM = which(colnames(ANCOM_otu_dat)%in% ANCOM_default_res$detected),
disc_Wilcoxon_corrected = disc_Wilcoxon_corrected ,
disc_Wilcoxon_Paulson = disc_Wilcoxon_Paulson,
disc_Wilcoxon_percent = disc_Wilcoxon_percent,
RAR = which(p.adjust(res_Wilcoxon_list[[5]]$p.values.test,method = 'BH')<=Q_LEVEL)
)
method_names = c('ANCOM','WIL-FLOW','WIL-CSS','WIL-TSS','RAR')
shared_disc_mat = matrix(NA,nrow = length(method_names),ncol = length(method_names))
rownames(shared_disc_mat) = method_names
colnames(shared_disc_mat) = method_names
for(i in 1:length(method_names)){
for(j in i:length(method_names)){
shared_disc_mat[i,j] = sum(disc_list[[i]] %in% disc_list[[j]])
}
}
write.csv(shared_disc_mat,file = 'E:/MCB2/Results/gut_qPCR_shared_disc_mat.csv')
dpois(0,0.2)
dpois(0,0.2)^5
source('C:/MCB2/MCB2/MCB_Simulation/Gut_Data_Analyze_V3.R', echo=TRUE)
(26.4-28)/(17.1/sqrt(487))
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(subzero)
library(wcomp)
library(wcomp)
library(wcomp)
??wcomp
library(wcomp)
library(wcomp)
library(wcomp)
devtools::document()
library(wcomp)
library(wcomp)
library(wcomp)
devtools::document()
library(wcomp)
